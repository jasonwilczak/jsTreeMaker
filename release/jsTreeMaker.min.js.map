{"version":3,"sources":["jsTreeMaker.js","jsTreeMaker-1.0.js"],"names":["_typeof","Symbol","iterator","obj","constructor","jsTreeMaker","init","options","mergeRecursive","jsTreeMakerOptions","Container","setAttribute","setTreeView","TreeViewData","returnDataAsObject","currentData","returnDataAsJsonString","JSON","stringify","loadTree","treeData","innerHTML","selectedListItem","displayPrefix","newPrefix","parentNodePrefix","addedIdCounter","PlaceListActionsAfterText","MainListId","document","getElementsByTagName","ActionItemOptions","Remove","Display","Title","Callback","IsAllowed","Id","DefaultDisplay","Add","Edit","Collapse","Expand","generateNodes","nodeItem","childNodes","Array","isArray","createNode","Children","i","length","parentNodeId","generateCustomId","ParentId","parentNode","getElementById","createElement","appendChild","node","displayElement","onclick","event","target","currentTarget","parentElement","previousSelectedListItem","getAttribute","style","color","undefined","editStyleDisplayValue","display","generateListActions","obj1","obj2","p","Object","e","prefix","baseId","listElement","allowAdd","allowRemove","allowEdit","actionContainer","elementId","generateActionItem","actionItemElement","childContainer","newDisplay","newActionItemOptionsName","newActionItemOptions","canRemove","currentElement","confirm","removeNodeFromData","removeChild","canAdd","userData","prompt","newNode","addNodeToData","canEdit","editActionItem","editNodeData","actionItemOptionName","clickFunction","actionItemOption","actionItem","actionItemDisplay","createTextNode","nodeToAdd","push","parentNodeSource","findNodeSourceInData","findNodeIndexInNodeSource","nodeToRemove","removeSource","splice","element","nodeWithIdOnly","nodeSource","nodeIndex","promptData","elementTextChild","nodeToFind","childSource","nodeIdToMatch","parse","Initialize","LoadTree","GetDataAsObject","GetDataAsJsonString"],"mappings":"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","file":"jsTreeMaker.min.js","sourcesContent":["\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar jsTreeMaker = function () {\n    var selectedListItem;\n    var displayPrefix = \"displayFor\";\n    var newPrefix = \"new\";\n    var parentNodePrefix = \"parent\";\n    var addedIdCounter = 0;\n    var currentData;\n    var jsTreeMakerOptions = {\n        PlaceListActionsAfterText: true,\n        MainListId: 0,\n        Container: document.getElementsByTagName('body')[0],\n        ActionItemOptions: {\n            Remove: {\n                Display: \"[-]\",\n                Title: \"Click to Remove\",\n                Callback: function Callback() {},\n                IsAllowed: true,\n                Id: \"actionItemRemove\",\n                DefaultDisplay: \"\"\n            },\n            Add: {\n                Display: \"[+]\",\n                Title: \"Click to Add A Child\",\n                Callback: function Callback() {},\n                IsAllowed: true,\n                Id: \"actionItemAdd\",\n                DefaultDisplay: \"\"\n            },\n            Edit: {\n                Display: \"[‚úè]\",\n                Title: \"Click to Edit Text\",\n                Callback: function Callback() {},\n                IsAllowed: true,\n                Id: \"actionItemEdit\",\n                DefaultDisplay: \"none\"\n            },\n            Collapse: {\n                Display: \"[^]\",\n                Title: \"Click to Collapse\",\n                Callback: function Callback() {},\n                DefaultDisplay: \"\"\n            },\n            Expand: {\n                Display: \"[*]\",\n                Title: \"Click to Expand\",\n                Callback: function Callback() {},\n                DefaultDisplay: \"\"\n            }\n        },\n        TreeViewData: []\n    };\n\n    var generateNodes = function generateNodes(nodeItem) {\n        var childNodes = nodeItem || [];\n        if (nodeItem && (typeof nodeItem === \"undefined\" ? \"undefined\" : _typeof(nodeItem)) === \"object\" && !Array.isArray(nodeItem)) {\n            createNode(nodeItem);\n            childNodes = nodeItem.Children;\n        }\n        for (var i = 0; i < childNodes.length; i++) {\n            generateNodes(childNodes[i]);\n        }\n    };\n    var createNode = function createNode(nodeItem) {\n        var parentNodeId = generateCustomId(parentNodePrefix, nodeItem.ParentId);\n        var parentNode = document.getElementById(parentNodeId);\n        if (!parentNode) {\n            parentNode = document.createElement(\"ul\");\n            parentNode.setAttribute(\"id\", parentNodeId);\n            document.getElementById(nodeItem.ParentId).appendChild(parentNode);\n        }\n        var node = document.createElement(\"li\");\n        node.setAttribute(\"id\", nodeItem.Id);\n        var displayElement = document.createElement(\"span\");\n        displayElement.innerHTML = nodeItem.Display;\n        displayElement.setAttribute(\"id\", generateCustomId(displayPrefix, nodeItem.Id));\n        displayElement.onclick = function (event) {\n            var target = event.currentTarget.parentElement;\n            if (selectedListItem) {\n                var previousSelectedListItem = document.getElementById(generateCustomId(displayPrefix, selectedListItem.getAttribute('id')));\n                previousSelectedListItem.style.color = \"black\";\n            }\n            selectedListItem = selectedListItem && selectedListItem.getAttribute('id') == target.getAttribute('id') ? undefined : target;\n            if (selectedListItem) {\n                event.currentTarget.style.color = \"green\";\n            }\n            var editStyleDisplayValue = selectedListItem ? \"\" : \"none\";\n            document.getElementById(jsTreeMakerOptions.ActionItemOptions[\"Edit\"].Id).style.display = editStyleDisplayValue;\n        };\n        if (jsTreeMakerOptions.PlaceListActionsAfterText) {\n            node.appendChild(displayElement);\n            generateListActions(node, false, false, false);\n        } else {\n            generateListActions(node, false, false, false);\n            node.appendChild(displayElement);\n        }\n\n        parentNode.appendChild(node);\n    };\n    //Simple function to natively merge user defined options with defaults\n    var mergeRecursive = function mergeRecursive(obj1, obj2) {\n        for (var p in obj2) {\n            try {\n                // Property in destination object set; update its value.\n                if (obj2[p].constructor == Object) {\n                    obj1[p] = mergeRecursive(obj1[p], obj2[p]);\n                } else {\n                    obj1[p] = obj2[p];\n                }\n            } catch (e) {\n                // Property in destination object not set; create it and set its value.\n                obj1[p] = obj2[p];\n            }\n        }\n\n        return obj1;\n    };\n    //Creates a custom formatted id value for the <ul> elements: ul#\n    var generateCustomId = function generateCustomId(prefix, baseId) {\n        return prefix + baseId;\n    };\n    //Used to insert the available actions for any given list item: add/remove\n    var generateListActions = function generateListActions(listElement, allowAdd, allowRemove, allowEdit) {\n        var actionContainer = document.createElement(\"span\");\n        var elementId = listElement.getAttribute(\"id\");\n        actionContainer.appendChild(generateActionItem(\"Collapse\", function (actionItemElement) {\n            var childContainer = document.getElementById(generateCustomId(parentNodePrefix, elementId));\n            if (childContainer) {\n                var newDisplay = \"\";\n                var newActionItemOptionsName = \"Collapse\";\n                if (childContainer.style.display !== \"none\") {\n                    newDisplay = \"none\";\n                    newActionItemOptionsName = \"Expand\";\n                }\n                var newActionItemOptions = jsTreeMakerOptions.ActionItemOptions[newActionItemOptionsName];\n                actionItemElement.setAttribute(\"title\", newActionItemOptions.Title);\n                actionItemElement.innerHTML = newActionItemOptions.Display;\n                childContainer.style.display = newDisplay;\n            }\n        }));\n        var canRemove = allowRemove !== undefined ? allowRemove : jsTreeMakerOptions.ActionItemOptions[\"Remove\"].IsAllowed;\n        if (canRemove) {\n            actionContainer.appendChild(generateActionItem(\"Remove\", function () {\n                var currentElement = selectedListItem || listElement;\n                elementId = currentElement.getAttribute(\"id\");\n                if (confirm(\"Are you sure you want to delete this and all its children...?\")) {\n                    removeNodeFromData({ Id: elementId });\n                    currentElement.parentNode.removeChild(currentElement);\n                }\n            }));\n        }\n        var canAdd = allowAdd !== undefined ? allowAdd : jsTreeMakerOptions.ActionItemOptions[\"Add\"].IsAllowed;\n        if (canAdd) {\n            actionContainer.appendChild(generateActionItem(\"Add\", function () {\n                var currentElement = selectedListItem || listElement;\n                elementId = currentElement.getAttribute(\"id\");\n                var userData = prompt(\"Enter display text:\", \"\");\n                if (!userData) return;\n                addedIdCounter++;\n                var newNode = { Display: userData, Id: generateCustomId(newPrefix, addedIdCounter), ParentId: elementId, Children: [] };\n                createNode(newNode);\n                addNodeToData(newNode);\n            }));\n        }\n        var canEdit = allowEdit !== undefined ? allowEdit : jsTreeMakerOptions.ActionItemOptions[\"Edit\"].IsAllowed;\n        if (canEdit) {\n            var editActionItem = generateActionItem(\"Edit\", function () {\n                var currentElement = selectedListItem || listElement;\n                editNodeData(currentElement);\n            });\n            actionContainer.appendChild(editActionItem);\n        }\n        listElement.appendChild(actionContainer);\n    };\n    var generateActionItem = function generateActionItem(actionItemOptionName, clickFunction) {\n        var actionItemOption = jsTreeMakerOptions.ActionItemOptions[actionItemOptionName];\n\n        var actionItem = document.createElement(\"a\");\n        var actionItemDisplay = document.createTextNode(actionItemOption.Display);\n        actionItem.appendChild(actionItemDisplay);\n        actionItem.setAttribute(\"href\", \"#\");\n        actionItem.setAttribute(\"title\", actionItemOption.Title);\n        if (actionItemOption.Id) {\n            actionItem.setAttribute(\"id\", actionItemOption.Id);\n        }\n        actionItem.onclick = function () {\n            clickFunction(actionItem);\n            actionItemOption.Callback(actionItem);\n        };\n        actionItem.style.display = actionItemOption.DefaultDisplay;\n        return actionItem;\n    };\n    var addNodeToData = function addNodeToData(nodeToAdd) {\n        if (nodeToAdd.ParentId == 0) {\n            currentData.push(nodeToAdd);\n            return;\n        }\n        var parentNodeSource = findNodeSourceInData({ Id: nodeToAdd.ParentId }, currentData);\n        if (parentNodeSource) {\n            parentNodeSource[findNodeIndexInNodeSource(nodeToAdd.ParentId, parentNodeSource)].Children.push(nodeToAdd);\n        }\n    };\n    var removeNodeFromData = function removeNodeFromData(nodeToRemove) {\n        var removeSource = findNodeSourceInData(nodeToRemove, currentData);\n        if (removeSource) {\n            removeSource.splice(findNodeIndexInNodeSource(nodeToRemove.Id, removeSource, 1));\n        }\n    };\n    var editNodeData = function editNodeData(element) {\n        var nodeWithIdOnly = { Id: element.getAttribute(\"id\") };\n        var nodeSource = findNodeSourceInData(nodeWithIdOnly, currentData);\n        var nodeIndex = findNodeIndexInNodeSource(nodeWithIdOnly.Id, nodeSource);\n        var promptData = prompt(\"Enter new text:\", nodeSource[nodeIndex].Display);\n        nodeSource[nodeIndex].Display = promptData;\n        var elementTextChild = document.getElementById(generateCustomId(displayPrefix, nodeWithIdOnly.Id));\n        elementTextChild.innerHTML = promptData;\n    };\n    var findNodeSourceInData = function findNodeSourceInData(nodeToFind, nodeSource) {\n        for (var i = 0; i < nodeSource.length; i++) {\n            if (nodeToFind.Id == nodeSource[i].Id) {\n                return nodeSource;\n            }\n            var childSource = findNodeSourceInData(nodeToFind, nodeSource[i].Children);\n            if (childSource) {\n                return childSource;\n            }\n        }\n        return null;\n    };\n    var findNodeIndexInNodeSource = function findNodeIndexInNodeSource(nodeIdToMatch, nodeSource) {\n        for (var i = 0; i < nodeSource.length; i++) {\n            if (nodeSource[i].Id == nodeIdToMatch) {\n                return i;\n            }\n        }\n    };\n    var setTreeView = function setTreeView(treeData) {\n        generateListActions(jsTreeMakerOptions.Container);\n        currentData = JSON.parse(JSON.stringify(treeData)); //clone the array\n        generateNodes(currentData);\n    };\n    function init(options) {\n        mergeRecursive(jsTreeMakerOptions, options);\n        jsTreeMakerOptions.Container.setAttribute(\"id\", \"0\");\n        setTreeView(jsTreeMakerOptions.TreeViewData);\n    }\n    function returnDataAsObject() {\n        return currentData;\n    }\n    function returnDataAsJsonString() {\n        return JSON.stringify(currentData);\n    }\n    function loadTree(treeData) {\n        jsTreeMakerOptions.Container.innerHTML = '';\n        setTreeView(treeData);\n    }\n    return {\n        Initialize: init,\n        LoadTree: loadTree,\n        GetDataAsObject: returnDataAsObject,\n        GetDataAsJsonString: returnDataAsJsonString\n    };\n}();","var jsTreeMaker = (function () {\r\n    var selectedListItem;\r\n    var displayPrefix = \"displayFor\";\r\n    var newPrefix = \"new\";\r\n    var parentNodePrefix = \"parent\";\r\n    var addedIdCounter = 0;\r\n    var currentData;\r\n    var jsTreeMakerOptions = {\r\n        PlaceListActionsAfterText: true,\r\n        MainListId: 0,\r\n        Container: document.getElementsByTagName('body')[0],\r\n        ActionItemOptions: {\r\n            Remove: {\r\n                Display: \"[-]\",\r\n                Title: \"Click to Remove\",\r\n                Callback: function() {},\r\n                IsAllowed: true,\r\n                Id: \"actionItemRemove\",\r\n                DefaultDisplay: \"\"\r\n            },\r\n            Add: {\r\n                Display: \"[+]\",\r\n                Title: \"Click to Add A Child\",\r\n                Callback: function () { },\r\n                IsAllowed: true,\r\n                Id: \"actionItemAdd\",\r\n                DefaultDisplay: \"\"\r\n            },\r\n            Edit: {\r\n                Display: \"[‚úè]\",\r\n                Title: \"Click to Edit Text\",\r\n                Callback: function () { },\r\n                IsAllowed: true,\r\n                Id: \"actionItemEdit\",\r\n                DefaultDisplay: \"none\"\r\n            },\r\n            Collapse: {\r\n                Display: \"[^]\",\r\n                Title: \"Click to Collapse\",\r\n                Callback: function() {},\r\n                DefaultDisplay: \"\"\r\n            },\r\n            Expand: {\r\n                Display: \"[*]\",\r\n                Title: \"Click to Expand\",\r\n                Callback: function () {},\r\n                DefaultDisplay: \"\"\r\n            }\r\n        },\r\n        TreeViewData: []\r\n    }\r\n\r\n    var generateNodes = function(nodeItem) {\r\n        var childNodes = nodeItem || [];\r\n        if (nodeItem && typeof nodeItem === \"object\" && !Array.isArray(nodeItem)) {\r\n            createNode(nodeItem);\r\n            childNodes = nodeItem.Children;\r\n        }\r\n        for (var i = 0; i < childNodes.length; i++) {\r\n            generateNodes(childNodes[i]);\r\n        }\r\n    }\r\n    var createNode = function(nodeItem) {\r\n        var parentNodeId = generateCustomId(parentNodePrefix, nodeItem.ParentId);\r\n        var parentNode = document.getElementById(parentNodeId);\r\n        if (!parentNode) {\r\n            parentNode = document.createElement(\"ul\");\r\n            parentNode.setAttribute(\"id\", parentNodeId);\r\n            document.getElementById(nodeItem.ParentId).appendChild(parentNode);\r\n        }\r\n        var node = document.createElement(\"li\");\r\n        node.setAttribute(\"id\", nodeItem.Id);\r\n        var displayElement = document.createElement(\"span\");\r\n        displayElement.innerHTML = nodeItem.Display;\r\n        displayElement.setAttribute(\"id\", generateCustomId(displayPrefix, nodeItem.Id));\r\n        displayElement.onclick = function (event) {\r\n            var target = event.currentTarget.parentElement;\r\n            if (selectedListItem) {\r\n                var previousSelectedListItem = document.getElementById(generateCustomId(displayPrefix, selectedListItem.getAttribute('id')));\r\n                previousSelectedListItem.style.color = \"black\";\r\n            }\r\n            selectedListItem = selectedListItem && selectedListItem.getAttribute('id') == target.getAttribute('id') ? undefined : target;\r\n            if (selectedListItem) {\r\n                event.currentTarget.style.color = \"green\";\r\n            }\r\n            var editStyleDisplayValue = selectedListItem ? \"\":\"none\";\r\n            document.getElementById(jsTreeMakerOptions.ActionItemOptions[\"Edit\"].Id).style.display = editStyleDisplayValue;\r\n        }\r\n        if (jsTreeMakerOptions.PlaceListActionsAfterText) {\r\n            node.appendChild(displayElement);\r\n            generateListActions(node,false,false,false);\r\n        } else {\r\n            generateListActions(node, false, false, false);\r\n            node.appendChild(displayElement);\r\n        }\r\n        \r\n        parentNode.appendChild(node);\r\n    }\r\n    //Simple function to natively merge user defined options with defaults\r\n    var mergeRecursive = function(obj1, obj2) {\r\n        for (var p in obj2) {\r\n            try {\r\n                // Property in destination object set; update its value.\r\n                if (obj2[p].constructor == Object) {\r\n                    obj1[p] = mergeRecursive(obj1[p], obj2[p]);\r\n\r\n                } else {\r\n                    obj1[p] = obj2[p];\r\n\r\n                }\r\n\r\n            } catch (e) {\r\n                // Property in destination object not set; create it and set its value.\r\n                obj1[p] = obj2[p];\r\n\r\n            }\r\n        }\r\n\r\n        return obj1;\r\n    }\r\n    //Creates a custom formatted id value for the <ul> elements: ul#\r\n    var generateCustomId = function(prefix,baseId) {\r\n        return prefix + baseId;\r\n    }\r\n    //Used to insert the available actions for any given list item: add/remove\r\n    var generateListActions = function(listElement,allowAdd,allowRemove,allowEdit) {\r\n        var actionContainer = document.createElement(\"span\");\r\n        var elementId = listElement.getAttribute(\"id\");\r\n        actionContainer.appendChild(generateActionItem(\"Collapse\", function (actionItemElement) {\r\n            var childContainer = document.getElementById(generateCustomId(parentNodePrefix, elementId));\r\n            if (childContainer) {\r\n                var newDisplay = \"\";\r\n                var newActionItemOptionsName = \"Collapse\";\r\n                if (childContainer.style.display !== \"none\") {\r\n                    newDisplay = \"none\";\r\n                    newActionItemOptionsName = \"Expand\";\r\n                }\r\n                var newActionItemOptions = jsTreeMakerOptions.ActionItemOptions[newActionItemOptionsName];\r\n                actionItemElement.setAttribute(\"title\", newActionItemOptions.Title);\r\n                actionItemElement.innerHTML = newActionItemOptions.Display;\r\n                childContainer.style.display = newDisplay;\r\n            }\r\n        }));\r\n        var canRemove = allowRemove !== undefined ? allowRemove : jsTreeMakerOptions.ActionItemOptions[\"Remove\"].IsAllowed;\r\n        if (canRemove) {\r\n            actionContainer.appendChild(generateActionItem(\"Remove\", function () {\r\n                var currentElement = selectedListItem || listElement;\r\n                elementId = currentElement.getAttribute(\"id\");\r\n                if (confirm(\"Are you sure you want to delete this and all its children...?\")) {\r\n                    removeNodeFromData({ Id: elementId });\r\n                    currentElement.parentNode.removeChild(currentElement);\r\n                }\r\n            }));\r\n        }\r\n        var canAdd = allowAdd !== undefined ? allowAdd : jsTreeMakerOptions.ActionItemOptions[\"Add\"].IsAllowed;\r\n        if (canAdd) {\r\n            actionContainer.appendChild(generateActionItem(\"Add\", function () {\r\n                var currentElement = selectedListItem || listElement;\r\n                elementId = currentElement.getAttribute(\"id\");\r\n                var userData = prompt(\"Enter display text:\",\"\");\r\n                if(!userData) return;\r\n                addedIdCounter++;\r\n                var newNode = { Display: userData, Id: generateCustomId(newPrefix, addedIdCounter), ParentId: elementId, Children: [] };\r\n                createNode(newNode);\r\n                addNodeToData(newNode);\r\n            }));\r\n        }\r\n        var canEdit = allowEdit !== undefined ? allowEdit : jsTreeMakerOptions.ActionItemOptions[\"Edit\"].IsAllowed;\r\n        if (canEdit) {\r\n            var editActionItem = generateActionItem(\"Edit\", function() {\r\n                var currentElement = selectedListItem || listElement;\r\n                editNodeData(currentElement);\r\n            });\r\n            actionContainer.appendChild(editActionItem);\r\n        }\r\n        listElement.appendChild(actionContainer);\r\n    }\r\n    var generateActionItem = function (actionItemOptionName, clickFunction) {\r\n        var actionItemOption = jsTreeMakerOptions.ActionItemOptions[actionItemOptionName];\r\n\r\n        var actionItem = document.createElement(\"a\");\r\n        var actionItemDisplay = document.createTextNode(actionItemOption.Display);\r\n        actionItem.appendChild(actionItemDisplay);\r\n        actionItem.setAttribute(\"href\", \"#\");\r\n        actionItem.setAttribute(\"title\", actionItemOption.Title);\r\n        if (actionItemOption.Id) {\r\n            actionItem.setAttribute(\"id\", actionItemOption.Id);\r\n        }\r\n        actionItem.onclick = function () {\r\n            clickFunction(actionItem);\r\n            actionItemOption.Callback(actionItem);\r\n        }\r\n        actionItem.style.display = actionItemOption.DefaultDisplay;\r\n        return actionItem;\r\n    }\r\n    var addNodeToData = function (nodeToAdd) {\r\n        if (nodeToAdd.ParentId == 0) {\r\n            currentData.push(nodeToAdd);\r\n            return;\r\n        }\r\n        var parentNodeSource = findNodeSourceInData({ Id: nodeToAdd.ParentId }, currentData);\r\n        if (parentNodeSource) {\r\n            parentNodeSource[findNodeIndexInNodeSource(nodeToAdd.ParentId, parentNodeSource)].Children.push(nodeToAdd);\r\n        }\r\n    }\r\n    var removeNodeFromData = function(nodeToRemove) {\r\n        var removeSource = findNodeSourceInData(nodeToRemove, currentData);\r\n        if (removeSource) {\r\n            removeSource.splice(findNodeIndexInNodeSource(nodeToRemove.Id, removeSource, 1));\r\n        }\r\n    }\r\n    var editNodeData = function (element) {\r\n        var nodeWithIdOnly = { Id: element.getAttribute(\"id\") };\r\n        var nodeSource = findNodeSourceInData(nodeWithIdOnly, currentData);\r\n        var nodeIndex = findNodeIndexInNodeSource(nodeWithIdOnly.Id, nodeSource);\r\n        var promptData = prompt(\"Enter new text:\", nodeSource[nodeIndex].Display);\r\n        nodeSource[nodeIndex].Display = promptData;\r\n        var elementTextChild = document.getElementById(generateCustomId(displayPrefix, nodeWithIdOnly.Id));\r\n        elementTextChild.innerHTML = promptData;\r\n    }\r\n    var findNodeSourceInData = function(nodeToFind,nodeSource) {\r\n        for (var i = 0; i < nodeSource.length; i++) {\r\n            if (nodeToFind.Id == nodeSource[i].Id) {\r\n                return nodeSource;\r\n            }\r\n            var childSource = findNodeSourceInData(nodeToFind, nodeSource[i].Children);\r\n            if (childSource) {\r\n                return childSource;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    var findNodeIndexInNodeSource = function(nodeIdToMatch, nodeSource) {\r\n        for (var i = 0; i < nodeSource.length; i++) {\r\n            if (nodeSource[i].Id == nodeIdToMatch) {\r\n                return i;\r\n            }\r\n        }\r\n    }\r\n    var setTreeView = function(treeData) {\r\n        generateListActions(jsTreeMakerOptions.Container);\r\n        currentData = JSON.parse(JSON.stringify(treeData)); //clone the array\r\n        generateNodes(currentData);\r\n    }\r\n    function init(options) {\r\n        mergeRecursive(jsTreeMakerOptions, options);\r\n        jsTreeMakerOptions.Container.setAttribute(\"id\", \"0\");\r\n        setTreeView(jsTreeMakerOptions.TreeViewData);\r\n    }\r\n    function returnDataAsObject() {\r\n        return currentData;\r\n    }\r\n    function returnDataAsJsonString() {\r\n        return JSON.stringify(currentData);\r\n    }\r\n    function loadTree(treeData) {\r\n        jsTreeMakerOptions.Container.innerHTML = '';\r\n        setTreeView(treeData);\r\n    }\r\n    return {\r\n        Initialize: init,\r\n        LoadTree: loadTree,\r\n        GetDataAsObject: returnDataAsObject,\r\n        GetDataAsJsonString: returnDataAsJsonString\r\n    }\r\n})();\r\n"],"sourceRoot":"/source/"}